##########################
# COMMENTS
##########################

# add inline comment
snippet // "text //"
${0:${VISUAL}}  // ${1:comment}
endsnippet

##########################
# LABELS
##########################

# simple dim
snippet "ld(\d+)" "myDim dim 10" r
${0:${VISUAL}} dim `!p snip.rv = match.group(1)`
endsnippet

# simple dim init
snippet ldi "myDim init 'text'"
${0:${VISUAL}} init "${1:text}"
endsnippet

# simple form
snippet "lf(\d*\.\d+|\d+)" "myDim form 10.2" r
${0:${VISUAL}} form `!p snip.rv = match.group(1)`
endsnippet

# const
snippet lc "myConstant const '1'"
${0:${VISUAL}} const "${1:number}"
endsnippet

# simple record
snippet lrec "label record ..."
${0:${VISUAL}} record
`!p snip.rv = "\t" + "recordend"`
endsnippet

# simple record like
snippet lrecl "label record like ..."
${0:${VISUAL}} record like ${1:record}
endsnippet

# simple function
snippet lfunc "myFunc function ..."
${0:${VISUAL}} function
`!p snip.rv = "\t" + "entry"`
`!p snip.rv = "functionResult form 1"`
`!p snip.rv = "\t" + "functionend using functionResult"`
endsnippet

##########################
# INSTRUCTIONS
##########################

# move instruction
snippet mv "move x, y"
move ${1:${VISUAL}}, ${0:label}
endsnippet

# squeeze instruction
snippet sq "squeeze x, y"
squeeze ${2:${VISUAL}}, ${1:${VISUAL}}
$0
endsnippet

# unpack instruction
snippet up "unpack x, y, z, ..."
unpack ${1:${VISUAL}}, ${0:label}
endsnippet

# unpack empty instruction
snippet upe "unpack '', x"
unpack "", ${0:${VISUAL}}
endsnippet

# append instruction
snippet ap "append x, y"
append ${1:${VISUAL}}, ${0:label}
endsnippet

# append text instruction
snippet apt "append 'some text', y"
append "${1:${VISUAL}}", ${0:label}
endsnippet

# replace char with char from label
snippet repl "replace 'char char', label"
replace "${1:chars}", ${0:${VISUAL}}
endsnippet

# call function giving result using ...
snippet cfr "call function giving result using ..."
call ${0:${VISUAL}} giving ${1:functionResult} using ${2:label}
endsnippet

# return using functionResult
snippet rfr "return using functionResult"
return using ${1:functionResult}
$0
endsnippet

# switch instruction
snippet sw "switch myCase..."
switch ${1:label}
	case ${2:case}
		$0
	default
endswitch
endsnippet
##########################
# CONDITIONALS
##########################

# if condition
snippet if "if ( ... )"
if ( ${1:condition} )
	${0:${VISUAL}}
endsnippet

# elseif condition
snippet elif "elseif ( ... )"
elseif ( ${1:condition} )
	${0:${VISUAL}}
endsnippet

# else snippet
snippet else
else
	${0:${VISUAL}}
endif
endsnippet
